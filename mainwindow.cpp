#include "mainwindow.h"
#include "ui_mainwindow.h"

MainWindow::MainWindow(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::MainWindow)
{
    ui->setupUi(this);
}
unsigned char header_180120[613]={0xff,0xd8,0xff,0xe0,0x0,0x10,0x4a,0x46,0x49,0x46,0x0,0x1,0x1,0x0,0x0,0x1,0x0,0x1,0x0,0x0,0xff,0xdb,0x0,0x84,0x0,0x8,0x6,0x6,0x7,0x6,0x5,0x8,0x7,0x7,0x7,0x9,0x9,0x8,0xa,0xc,0x14,0xd,0xc,0xb,0xb,0xc,0x19,0x12,0x13,0xf,0x14,0x1d,0x1a,0x1f,0x1e,0x1d,0x1a,0x1c,0x1c,0x20,0x24,0x2e,0x27,0x20,0x22,0x2c,0x23,0x1c,0x1c,0x28,0x37,0x29,0x2c,0x30,0x31,0x34,0x34,0x34,0x1f,0x27,0x39,0x3d,0x38,0x32,0x3c,0x2e,0x33,0x34,0x32,0x1,0x9,0x9,0x9,0xc,0xb,0xc,0x18,0xd,0xd,0x18,0x32,0x21,0x1c,0x21,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0xff,0xc0,0x0,0x11,0x8,0x0,0x78,0x0,0xb0,0x3,0x1,0x21,0x0,0x2,0x11,0x1,0x3,0x11,0x1,0xff,0xc4,0x1,0xa2,0x0,0x0,0x1,0x5,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x2,0x3,0x4,0x5,0x6,0x7,0x8,0x9,0xa,0xb,0x10,0x0,0x2,0x1,0x3,0x3,0x2,0x4,0x3,0x5,0x5,0x4,0x4,0x0,0x0,0x1,0x7d,0x1,0x2,0x3,0x0,0x4,0x11,0x5,0x12,0x21,0x31,0x41,0x6,0x13,0x51,0x61,0x7,0x22,0x71,0x14,0x32,0x81,0x91,0xa1,0x8,0x23,0x42,0xb1,0xc1,0x15,0x52,0xd1,0xf0,0x24,0x33,0x62,0x72,0x82,0x9,0xa,0x16,0x17,0x18,0x19,0x1a,0x25,0x26,0x27,0x28,0x29,0x2a,0x34,0x35,0x36,0x37,0x38,0x39,0x3a,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7a,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8a,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9a,0xa2,0xa3,0xa4,0xa5,0xa6,0xa7,0xa8,0xa9,0xaa,0xb2,0xb3,0xb4,0xb5,0xb6,0xb7,0xb8,0xb9,0xba,0xc2,0xc3,0xc4,0xc5,0xc6,0xc7,0xc8,0xc9,0xca,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8,0xd9,0xda,0xe1,0xe2,0xe3,0xe4,0xe5,0xe6,0xe7,0xe8,0xe9,0xea,0xf1,0xf2,0xf3,0xf4,0xf5,0xf6,0xf7,0xf8,0xf9,0xfa,0x1,0x0,0x3,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x2,0x3,0x4,0x5,0x6,0x7,0x8,0x9,0xa,0xb,0x11,0x0,0x2,0x1,0x2,0x4,0x4,0x3,0x4,0x7,0x5,0x4,0x4,0x0,0x1,0x2,0x77,0x0,0x1,0x2,0x3,0x11,0x4,0x5,0x21,0x31,0x6,0x12,0x41,0x51,0x7,0x61,0x71,0x13,0x22,0x32,0x81,0x8,0x14,0x42,0x91,0xa1,0xb1,0xc1,0x9,0x23,0x33,0x52,0xf0,0x15,0x62,0x72,0xd1,0xa,0x16,0x24,0x34,0xe1,0x25,0xf1,0x17,0x18,0x19,0x1a,0x26,0x27,0x28,0x29,0x2a,0x35,0x36,0x37,0x38,0x39,0x3a,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7a,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8a,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9a,0xa2,0xa3,0xa4,0xa5,0xa6,0xa7,0xa8,0xa9,0xaa,0xb2,0xb3,0xb4,0xb5,0xb6,0xb7,0xb8,0xb9,0xba,0xc2,0xc3,0xc4,0xc5,0xc6,0xc7,0xc8,0xc9,0xca,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8,0xd9,0xda,0xe2,0xe3,0xe4,0xe5,0xe6,0xe7,0xe8,0xe9,0xea,0xf2,0xf3,0xf4,0xf5,0xf6,0xf7,0xf8,0xf9,0xfa,0xff,0xdd,0x0,0x4,0x0,0xb,0xff,0xda,0x0,0xc,0x3,0x1,0x0,0x2,0x11,0x3,0x11,0x0,0x3f,0x0};

MainWindow::~MainWindow()
{
    delete ui;
}

void MainWindow::on_pushButton_clicked()
{
    /*Format of file
     * nn,nn,nn,nn,nn,nn,nn,nn,nn,nn,nn,nn,nn,nn,
     *
     * where nn is a number in hexa decimal form
     * */
    file1Name = QFileDialog::getOpenFileName(this,tr("Open Data File"),"C:\\ ", tr("txt Files (*.txt)"));
    ui->lineEdit->setText(file1Name);

//    data=QString(file1->readAll());//*
    //data.append(file1->read)
//    ui->plainTextEdit->setPlainText(data);//*
    //ui->plainTextEdit->setText(data);
}

void MainWindow::on_pushButton_2_clicked()
{
    QFile *file1=new QFile(file1Name);
    file1->open(QIODevice::ReadOnly | QIODevice::Text);//*
//    data=ui->plainTextEdit->toPlainText();
    QString str,data;
    int index=0;
    while(!file1->atEnd()){
        str=file1->readLine();
        while(!str.contains("jpeg2")){
            str=file1->readLine();
            if(file1->atEnd()){
                return;
            }
        }
        //here, str contains NewFrame hence next line has data
        qDebug()<<"Found NewFrame";
        data=file1->readLine();
        //data=data.right(1);
        if(data[data.length()]=='\n')
            data.chop(1);//remove last character
        QStringList lst=data.split(",");
//        QByteArray yuvarr=QByteArray((const char*)header_180120);
        QByteArray yuvarr;
        foreach(QString s,lst){
            yuvarr.append(s.toInt(0,16));
        }
        //yuvarr now has the binary YUV422 UYVY data
        //Now display it or store it

        //YUV422_to_RGB888(yuvarr);
        //YUVtoRGB(yuvarr);
        index++;
        QFile *file2=new QFile(ui->lineEdit_2->text()+ QString::number(index)+".jpg");
        file2->open(QIODevice::WriteOnly);
        QDataStream out(file2);
        out.setByteOrder(QDataStream::LittleEndian); // *** set little endian byte order
        foreach(quint8 dat,yuvarr){
            out<<dat;
        }
        file2->close();

        QImage imageObject;
//        imageObject.load(imagePath);
//        QPixmap::
        imageObject.loadFromData(yuvarr,"JPG");
//        QPixmap m;
//        m.loadFromData(yuvarr.data(),yuvarr.size(),"JPG");
        ui->label_3->setPixmap(QPixmap::fromImage(imageObject));
        ui->label_3->show();
        qApp->processEvents();
        usleep(1000);
        //OR use the other way by setting the Pixmap directly
//        QPixmap pixmapObject(imagePath");
//        ui->myLabel2->setPixmap(pixmapObject);

    }

    file1->close();

}

void MainWindow::on_pushButton_3_clicked()
{
    QString file1Name = QFileDialog::getSaveFileName(this,tr("Save Data File"),"C:\\ ");
    ui->lineEdit_2->setText(file1Name);
}

void MainWindow::on_actionFile_info_triggered()
{
    QMessageBox msgb;
    msgb.setText("Format of file\n nn,nn,nn,nn,nn,nn,nn,nn,nn,nn,nn,nn,nn,nn,\n\n where nn is a number in hexa decimal form\n");
    msgb.exec();
}

void MainWindow::YUV422_to_RGB888( QByteArray rawStreamingFrame ) {

    // Print data size
    qDebug() << "Print the data size from read file: " << rawStreamingFrame.length() << " bytes...";
    // Get the raw data in the bytearray
    const char *binaryData = rawStreamingFrame.data();
    // Define the H and W of our output image ( we know it's 640 x 480 )
    int width = 180;
    int height = 120;
    //qDebug()<<width<<"h"<<height;
    // Create a QByteArray to store the RGB Data
    int redContainer[height*width];
    int greenContainer[height*width];
    int blueContainer[height*width];
    // To reconstruct pixels in pairs, 4 bytes of data are required. The bytes are arranged as u, y1, v, y2. The total number of bytes in the image stream is 2 x width x height.
    qDebug() << "Looping through... " << rawStreamingFrame.length()-4;

    // Loop through 4 bytes at a time
    int cnt = -1;
    int rowno=-1;
    for ( int i = 0 ; i <= (rawStreamingFrame.length()/2)-4 ; i += 4 ) {
       // Extract yuv components
#ifndef INTERLEAVED
       int u  = (int)binaryData[i];
       int y1 = (int)binaryData[i+1];
       int v  = (int)binaryData[i+2];
       int y2 = (int)binaryData[i+3];
#endif
#ifdef INTERLEAVED
       if(i%(width*2)==0){
           rowno++;
       }
       //byte pos=rowno*width + i%width
       int posn=((rowno%2==0)?rowno:((rowno+(height/2))/*%height*/))*width*2 +i%(width*2);
       qDebug()<<posn;
       //if(rowno is even the rowno else rowno+(height/2)
      int u  = (int)binaryData[posn];
      int y1 = (int)binaryData[posn+1];
      int v  = (int)binaryData[posn+2];
      int y2 = (int)binaryData[posn+3];
#endif
       // Define the RGB
       int r1 = 0 , g1 = 0 , b1 = 0;
       int r2 = 0 , g2 = 0 , b2 = 0;
       // u and v are +-0.5
       u -= 128;
       v -= 128;
       // Conversion
       r1 = y1 + 1.403*v;
       g1 = y1 - 0.344*u - 0.714*v;
       b1 = y1 + 1.770*u;

       r2 = y2 + 1.403*v;
       g2 = y2 - 0.344*u - 0.714*v;
       b2 = y2 + 1.770*u;
       // Increment by one so we can insert
       cnt+=1;
       // Append to the array holding our RGB Values
       redContainer[cnt] = r1;
       greenContainer[cnt] = g1;
       blueContainer[cnt] = b1;

       // Increment again since we have 2 pixels per uv value
       cnt+=1;
       // Store the second pixel
       redContainer[cnt] = r2;
       greenContainer[cnt] = g2;
       blueContainer[cnt] = b2;
    }

    // Define a QImage for our RGB Data
    QImage rgbImage = QImage(width, height, QImage::Format_RGB888);
    // Print constructing RGB image
    qDebug() << "Now constructing RGB Image... ";
    // Now construct our RGB image
    int pixelCounter = -1;
    for ( int i = 0; i < height; ++i ) {
        for ( int j = 0; j < width; ++j ) {
            pixelCounter+=1;
            rgbImage.setPixel( j, i, qRgb( redContainer[pixelCounter] ,  greenContainer[pixelCounter] , blueContainer[pixelCounter] ) );
        }
    }

    // Print pixel counter
    qDebug() << "Counted number of pixels: " << pixelCounter;
    // Save our Image!
    rgbImage.save("rgb_from_yuv.bmp");
//    ui->label_3->setPixmap(QPixmap::fromImage(rgbImage));
//    ui->label_3->show();
//    QLabel *myLabel = new QLabel(this); // sets parent of label to main window
//    myLabel->setPixmap(QPixmap::fromImage(rgbImage));
//    myLabel->show();

}

//RgbFColor* RgbF_CreateFromYuv(double y, double u, double v)
//{
//    RgbFColor *color = NULL;
//    if (Yiq_IsValid(y, u, v) == true)
//    {
//        color = RgbF_Create(0.0, 0.0, 0.0);
//        color->R = y + 1.140 * v;
//        color->G = y - 0.395 * u - 0.581 * v;
//        color->B = y + 2.032 * u;
//    }
//    return color;
//}

//void convertToRGB(QByteArray yuvData){

//    int width;
//    int height;

//}
